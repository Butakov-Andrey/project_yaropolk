from typing import Generator

import openai
from config import settings
from loguru import logger
from services.constants import Gpt3_5Constants

# settings
openai.organization = settings.ORGANIZATION
openai.api_key = settings.OPENAI_API_KEY


class ChatAssistant:
    """
    A class representing a chat assistant that can communicate with users.
    """

    def __init__(
        self, system_prompt: str | None = Gpt3_5Constants.DEFAULT_SYSTEM_PROMPT
    ) -> None:
        """
        Initializes a new instance of the ChatAssistant class.

        Parameters:
        -----------
        system_prompt : str, optional.
            The prompt to use for the system's messages.
            If not provided, the default prompt will be used.
        """
        self.system_prompt = system_prompt

    def make_request_to_gpt_api(self, user_prompt: str) -> Generator[str, None, None]:
        """
        Sends a request to the OpenAI API to generate a streaming response.

        Parameters:
        -----------
        user_prompt : str.
            The message input by the user.

        Yields:
        -------
        str.
            A string containing the response messages generated by the API.
        """
        messages = [
            {"role": Gpt3_5Constants.SYSTEM_ROLE, "content": self.system_prompt},
            {"role": Gpt3_5Constants.USER_ROLE, "content": user_prompt},
        ]

        print(messages)

        try:
            response = openai.ChatCompletion.create(
                model=Gpt3_5Constants.MODEL,
                messages=messages,
                temperature=Gpt3_5Constants.TEMPERATURE,
                max_tokens=Gpt3_5Constants.MAX_TOKENS,
                stream=True,
            )
            for chunk in response:
                try:
                    chunk_message = chunk["choices"][0]["delta"]["content"]
                    yield from chunk_message
                except KeyError as e:
                    logger.error(f"Missing key: {e}")
                except Exception as e:
                    logger.error(e)
        except Exception as e:
            logger.error(e)
            response = f"Привет, я снова тупой. Ошибка: `{e}`"
            for chunk in response:
                yield from chunk
