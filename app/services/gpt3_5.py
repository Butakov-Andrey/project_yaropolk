from datetime import datetime
from typing import Generator

import openai
from config import settings
from loguru import logger
from mongo_db import context_db
from schemas import Message
from services import Gpt3_5Constants


class ChatAssistant:
    """
    A class representing a chat assistant that can communicate with users.
    """

    def __init__(
        self, system_prompt: str = Gpt3_5Constants.DEFAULT_SYSTEM_PROMPT
    ) -> None:
        """
        Initializes a new instance of the ChatAssistant class.

        Parameters:
        -----------
        system_prompt : str, optional.
            The prompt to use for the system's messages.
            If not provided, the default prompt will be used.
        """
        self.system_prompt = system_prompt
        self.openai_api_key = settings.OPENAI_API_KEY
        self.openai_organization = settings.ORGANIZATION

    def make_request_to_gpt_api(self, user_prompt: str) -> Generator[str, None, None]:
        """
        Sends a request to the OpenAI API to generate a streaming response.

        Parameters:
        -----------
        user_prompt : str.
            The message input by the user.

        Yields:
        -------
        str.
            A string containing the response messages generated by the API.
        """
        context = self.get_context()
        messages = [
            {
                "role": Gpt3_5Constants.SYSTEM_ROLE,
                "content": self.system_prompt + context,
            },
            {
                "role": Gpt3_5Constants.USER_ROLE,
                "content": user_prompt,
            },
        ]
        self.add_message_to_context(
            role=Gpt3_5Constants.USER_ROLE,
            text=user_prompt,
        )
        try:
            openai.organization = self.openai_organization
            openai.api_key = self.openai_api_key
            stream = openai.ChatCompletion.create(
                model=Gpt3_5Constants.MODEL,
                messages=messages,
                temperature=Gpt3_5Constants.TEMPERATURE,
                max_tokens=Gpt3_5Constants.MAX_TOKENS,
                stream=True,
            )
            total_stream_tokens = 0
            full_answer = []
            for chunk in stream:
                total_stream_tokens += 1
                try:
                    # only delte with content, ignore delta with role
                    chunk_message = chunk["choices"][0]["delta"]["content"]
                    full_answer.append(chunk_message)
                    yield from chunk_message
                except KeyError:
                    # if delta is empty - this is the end of the stream
                    if chunk["choices"][0]["delta"] == {}:
                        full_answer_str = "".join(full_answer)
                        self.add_message_to_context(
                            role=Gpt3_5Constants.ASSISTANT_ROLE,
                            text=full_answer_str,
                        )
                except Exception as e:
                    logger.error(e)
            logger.info(f"Total stream tokens: {total_stream_tokens}")
        except Exception as e:
            logger.error(e)
            stream = f"Hello, dude. Error: `{e}`"
            for chunk in stream:
                yield from chunk

    def add_message_to_context(self, role: str, text: str) -> None:
        """
        Creates a new message with the given role and text, and inserts it into the
        messages collection.

        Parameters:
        -----------
        role: str.
            Representing the role of the message.
        text: str
            Representing the text of the message.
        """
        message = Message(role=role, text=text, timestamp=datetime.now())
        context_db.messages.insert_one(message.dict())

    def get_context(self) -> str:
        """
        Retrieve the last 50 messages from the MongoDB collection 'messages',
        sorted by timestamp in descending order.

        Returns:
        -----------
        list[str].
            A list of strings representing the text of the last 50 messages.
        """
        messages = (
            context_db.messages.find({}, {"text": 1, "role": 1})
            .sort("timestamp", -1)
            .limit(Gpt3_5Constants.CONTEXT_LIMIT_MESSAGES)
        )

        context = [f"{msg['role']}: {msg['text']} \n" for msg in messages][::-1]
        return "".join(context)

    def delete_all_context(self) -> int:
        """
        Deletes all messages from the MongoDB collection 'messages'.
        """
        result = context_db.messages.delete_many({})
        return result.deleted_count


chat_assistant = ChatAssistant()
